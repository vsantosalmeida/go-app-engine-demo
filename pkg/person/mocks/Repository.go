// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/vsantosalmeida/go-app-engine-demo/pkg/entity"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: k
func (_m *Repository) Delete(k string) error {
	ret := _m.Called(k)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]*entity.Person, error) {
	ret := _m.Called()

	var r0 []*entity.Person
	if rf, ok := ret.Get(0).(func() []*entity.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByKey provides a mock function with given fields: k
func (_m *Repository) FindByKey(k string) (*entity.Person, error) {
	ret := _m.Called(k)

	var r0 *entity.Person
	if rf, ok := ret.Get(0).(func(string) *entity.Person); ok {
		r0 = rf(k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(k)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnsent provides a mock function with given fields:
func (_m *Repository) GetUnsent() ([]*entity.Person, error) {
	ret := _m.Called()

	var r0 []*entity.Person
	if rf, ok := ret.Get(0).(func() []*entity.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsKeyAssociated provides a mock function with given fields: pk
func (_m *Repository) IsKeyAssociated(pk string) (bool, error) {
	ret := _m.Called(pk)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(pk)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: p
func (_m *Repository) Store(p *entity.Person) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Person) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: p, commitChan, doneChan
func (_m *Repository) Update(p *entity.Person, commitChan <-chan bool, doneChan chan<- bool) {
	_m.Called(p, commitChan, doneChan)
}
